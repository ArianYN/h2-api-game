@page "/"
@inject NavigationManager NavManager

<PageTitle>Country Game</PageTitle>

<div class="center-container">
    <h1 class="h1-title">Country Quiz Game</h1>


    @if (countryHint != null)
    {
        <input type="text" @bind="InputValue" @onkeyup="EnterKey" class="InputField" placeholder="Enter Your Guess"/>
        <button @onclick="GuessManager" class="btn-guess">Guess</button>

        if (countryHint.Contains("flag"))
        {
            string flagUrl = countryHint.Split(" ")[6];
            string hintText = countryHint.Split(":")[0];
            <p>@hintText</p>
            <img src="@flagUrl"/>
        }
        else
        {
            <p><strong>@countryHint</strong></p>
        }
    }
    else
    {
        <span class="loader"></span>
    }

    @if (guessCheck)
    {
        <span style="color: lawngreen"><strong>Correct!</strong></span>
    }
    else if (!guessCheck && guessCounter != 0)
    {
        if (extraCountryHint != null)
        {
            if (extraCountryHint.Contains("flag"))
            {
                string flagUrl = extraCountryHint.Split(" ")[6];
                string hintText = extraCountryHint.Split(":")[0];
                <p><strong>Extra Hint!</strong> @hintText</p>
                <img src="@flagUrl"/>
            }
            else
            {
                <p><strong>Extra Hint!</strong> @extraCountryHint</p>
            }
        }

        <span style="color: red"><strong>Incorrect!</strong></span>
    }

    <br/>
    <h3><strong>Guessed Countries: (@guessedCountries.Count/@allCountries.Count)</strong></h3>
    @foreach (CountryClass country in guessedCountries)
    {
        <p>@country.name.common</p>
    }
</div>

@if (victory)
{
    <div class="modal show d-block" tabindex="-1" role="dialog" data-bs-theme="dark">
        <div class="modal-dialog" role="document">
            <div class="modal-content bg-dark text-white">
                <div class="modal-header bg-dark text-white">
                    <h5 class="modal-title">Victory</h5>
                    <div class="modal-body bg-dark text-white">
                        <p>WOW! You are amazing. Want to try again or Exit?</p>
                    </div>
                    <div class="modal-footer bg-dark text-white">
                        <button type="button"
                                class="btn btn-secondary"
                                style="background-color: rgba(255,0,0,0.57)"
                                @onclick="CloseModal">
                            Exit Game
                        </button>
                        <button type="button"
                                class="btn btn-secondary"
                                style="background-color: rgba(160,255,104,0.77)"
                                @onclick="ReloadPage">
                            Try Again
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal-backdrop fade show"></div>
}


@code {
    private string? InputValue { get; set; } = "";
    private bool victory = false;

    private string countryHint { get; set; }
    private string extraCountryHint { get; set; } = null;

    private bool guessCheck { get; set; }

    private string previousHint { get; set; }

    private int guessCounter = 0;
    private int wrongGuesses = 0;


    private void ShowVictoryModal()
    {
        victory = true;
    }

    private void CloseModal()
    {
        victory = false;
    }

    public void ReloadPage()
    {
        NavManager.NavigateTo(NavManager.Uri, true);
    }

    private List<CountryClass> allCountries = new List<CountryClass>();
    private List<CountryClass> guessedCountries = new List<CountryClass>();

    private CountryClass currentCountry = new CountryClass();

    private Dictionary<int, string> countryHints = new Dictionary<int, string>()
    {
        { 0, "This country has a population of: " },
        { 1, "The capital of this country is: " },
        { 2, "The Top Level Domain of this country is: " },
        { 3, "This country is referred to short as:  " },
        { 4, "This country has an area of (km^2): " },
        { 5, "The flag of this country is: " }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await populateCountryList();
            await CountryHint();
        }
    }

    private async Task populateCountryList()
    {
        ApiService apiService = new ApiService();
        allCountries = await apiService.GetDataAsync();
    }

    private async Task GuessManager()
    {
        try
        {
            if (guessedCountries.Count() == allCountries.Count())
            {
                victory = true;
                StateHasChanged();
                return;
            }

            if (InputValue == "")
            {
                return;
            }

            string guess = InputValue.Trim().ToLower();
            string CountryToGuess = this.currentCountry.name.common.Trim().ToLower();

            guessCounter++;

            if (CountryToGuess == guess)
            {
                guessCheck = true;
                wrongGuesses = 0;
                guessedCountries.Add(currentCountry);
                await CountryHint();
                InputValue = "";
                extraCountryHint = null;
                StateHasChanged();
            }
            else
            {
                wrongGuesses++;
                guessCheck = false;
                StateHasChanged();

                if (wrongGuesses == 3)
                {
                    await ExtraCountryHint();
                    StateHasChanged();
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            await GuessManager();
        }
    }

    private async Task CountryHint()
    {
        try
        {
            if (guessedCountries.Count() == allCountries.Count())
            {
                victory = true;
                StateHasChanged();
                return;
            }

            Random rng = new Random();
            int chosenCountryNumber = rng.Next(0, allCountries.Count());
            int chosenHintNumber = rng.Next(0, countryHints.Last().Key + 1);
            string hintData = "";

            currentCountry = allCountries[chosenCountryNumber];

            string ChosenHint = countryHints[chosenHintNumber];

            previousHint = ChosenHint;

            if (!guessedCountries.Contains(currentCountry))
            {
                switch (chosenHintNumber)
                {
                    case 0:
                        hintData = (int.Parse(currentCountry.population)).ToString("N0");
                        break;
                    case 1:
                        hintData = currentCountry.capital[0];
                        break;
                    case 2:
                        hintData = currentCountry.tld[0];
                        break;
                    case 3:
                        hintData = currentCountry.altSpellings[0];
                        break;
                    case 4:
                        hintData = currentCountry.area;
                        break;
                    case 5:
                        hintData = currentCountry.flags.png;
                        break;
                    default:
                        break;
                }

                countryHint = $"{ChosenHint}{hintData}";
                StateHasChanged();
            }
            else
            {
                await CountryHint();
            }
        }
        catch (Exception e)


        {
            Console.WriteLine(e);
            await CountryHint();
        }
    }

    private async Task ExtraCountryHint()
    {
        try
        {
            Random rng = new Random();
            int chosenHintNumber = rng.Next(0, countryHints.Last().Key + 1);
            string hintData = "";
            string ChosenHint = countryHints[chosenHintNumber];

            if (ChosenHint == previousHint)
            {
                await ExtraCountryHint();
            }

            switch (chosenHintNumber)
            {
                case 0:
                    hintData = (int.Parse(currentCountry.population)).ToString("N0");
                    break;
                case 1:
                    hintData = currentCountry.capital[0];
                    break;
                case 2:
                    hintData = currentCountry.tld[0];
                    break;
                case 3:
                    hintData = currentCountry.altSpellings[0];
                    break;
                case 4:
                    hintData = currentCountry.area;
                    break;
                case 5:
                    hintData = currentCountry.flags.png;
                    break;
                default:
                    break;
            }

            extraCountryHint = $"{ChosenHint}{hintData}";
            if (extraCountryHint == countryHint)
            {
                await ExtraCountryHint();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            await ExtraCountryHint();
        }
    }

    private async Task EnterKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await GuessManager();
        }
    }

}

<style>
    .center-container {
        min-height: 100vh;
        width: 100%;

        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;

        padding: 1rem;
    }

    .loader {
        width: 48px;
        height: 48px;
        border: 5px solid #FFF;
        border-bottom-color: #FF3D00;
        border-radius: 50%;
        display: block;
        margin: auto;
        box-sizing: border-box;
        animation: rotation 1s linear infinite;
    }

    @@keyframes rotation {
        0% {
            transform: rotate(0deg);
        }
        100% {
            transform: rotate(360deg);
        }
    }

    .h1-title {
        color: black;
        font-family: sans-serif;
        margin-bottom: 50px;
    }

    .InputField {
        width: 30em;
        padding: 20px;
        font-size: 1em;
        font-weight: 600;
        border-radius: 1em;
        border: 2px solid #D1E9F3;
        background-color: #EEF7FB;
        color: #333333;
        transition: box-shadow 0.3s ease;
        margin-bottom: 1rem;
    }

    .InputField:focus {
        outline: none;
        box-shadow: 0 0 0 4px rgba(209, 233, 243, 0.4);
    }

    /* Button */
    .btn-guess {
        width: 10em;
        padding: 20px;
        border: none;
        border-radius: 1em;
        background-color: #3091ff;
        color: #fff;
        font-size: 1em;
        font-weight: 600;
        cursor: pointer;
        margin-bottom: 30px;

        transition: background-color 0.3s ease, transform 0.3s ease;
    }

    .btn-guess:hover {
        background-color: #9EB9E0;
        transform: translateY(-2px);
    }

</style>